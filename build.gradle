plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.4'
	id 'io.spring.dependency-management' version '1.1.3'
	id "com.github.node-gradle.node" version "7.0.1"
}

group = 'com.bits.markoth'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
	targetCompatibility = '17'
}

node {
	// Version of node to use.
	version = '10.16.2'

	// Base URL for fetching node distributions (change if you have a mirror).
//    distBaseUrl = 'https://nodejs.org/dist'

	// If true, it will download node using above parameters.
	// If false, it will try to use globally installed node.
	download = true

	// Set the work directory for unpacking node
	workDir = file("${project.projectDir}/src/main/frontend/nodejs")

	// Set the work directory for NPM
	npmWorkDir = file("${project.projectDir}/src/main/frontend/npm")

	// Set the work directory where node_modules should be located
	nodeProjectDir = file("${project.projectDir}/src/main/frontend")
}


processResources{
	dependsOn 'copyFrontendToBuild'
}

tasks.register('copyFrontendToBuild', Copy) {
	from "$projectDir/src/main/frontend/build/"
//    include "*"
	into "$buildDir/resources/main/static"
}


tasks.register('npmBuild', NpmTask) {
	execOverrides {
//        it.ignoreExitValue = true
		it.workingDir = 'src/main/frontend'
	}
	args = ['run', 'build']
}

tasks.register('npmShowVersion', NpmTask) {
	execOverrides {
		it.ignoreExitValue = true
		it.workingDir = 'src/main/frontend'
	}
	args = ['--version']
}

tasks.register('npmInstall2', NpmTask) {
	execOverrides {
		it.ignoreExitValue = true
		it.workingDir = 'src/main/frontend'
	}
	args = ['install']
}

repositories {
	mavenCentral()
}

dependencies {
//	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}
