buildscript {
	dependencies {
		classpath 'com.h2database:h2:2.1.214'
		classpath 'com.smartnews:jpa-entity-generator:0.99.8'
	}
}
plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.0'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'com.github.node-gradle.node' version '7.0.1'
	id 'io.freefair.lombok' version '8.3'
}

apply plugin: 'entitygen'
entityGen {
	configPath = 'src/main/resources/entityGenConfig.yml'
}

group = 'com.bits.markoth'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
	targetCompatibility = '17'
}

node {
	// Version of node to use.
	version = '10.16.2'

	// Base URL for fetching node distributions (change if you have a mirror).
//    distBaseUrl = 'https://nodejs.org/dist'

	// If true, it will download node using above parameters.
	// If false, it will try to use globally installed node.
	download = true

	// Set the work directory for unpacking node
	workDir = file("${project.projectDir}/frontend/firstdraft")

	// Set the work directory for NPM
	npmWorkDir = file("${project.projectDir}/frontend/firstdraft")

	// Set the work directory where node_modules should be located
	nodeProjectDir = file("${project.projectDir}/frontend/firstdraft")
}


processResources{
	dependsOn 'copyFrontendToBuild'
}

tasks.register('copyFrontendToBuild', Copy) {
	from "$projectDir/frontend/build/"
//    include "*"
	into "$buildDir/resources/main/static"
}


tasks.register('npmBuild', NpmTask) {
	execOverrides {
//        it.ignoreExitValue = true
		it.workingDir = 'frontend'
	}
	args = ['run', 'build']
}

tasks.register('npmShowVersion', NpmTask) {
	execOverrides {
		it.ignoreExitValue = true
		it.workingDir = 'frontend'
	}
	args = ['--version']
}

tasks.register('npmInstall2', NpmTask) {
	execOverrides {
		it.ignoreExitValue = true
		it.workingDir = 'frontend'
	}
	args = ['install']
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
	implementation 'org.flywaydb:flyway-core'
	implementation 'com.mysql:mysql-connector-j:8.2.0'
	implementation 'org.flywaydb:flyway-mysql:8.4.4'
	implementation 'com.h2database:h2:2.1.214'
	implementation 'com.google.guava:guava:32.1.3-jre'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
	systemProperty("spring.profiles.active", "dev")
	useJUnitPlatform()
}